#pragma once

////
//
//      STM32H7 VREFBUF peripherals
//
////

////
//
//      VREFBUF
//
////

struct stm32h742x_vrefbuf_t
{
    volatile uint32_t CSR; // VREFBUF control and status register
    volatile uint32_t CCR; // [read-write] VREFBUF calibration control register

    static constexpr uint32_t CSR_RESET_VALUE = 0x2;
    static constexpr uint32_t CSR_ENVR = 0x1; // Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode.
    static constexpr uint32_t CSR_HIZ = 0x2;  // High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration.
    static constexpr uint32_t CSR_VRR = 0x8;  // Voltage reference buffer ready
    template<uint32_t X>
    static constexpr uint32_t CSR_VRS =       // Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved
        bit_field_t<4, 0x7>::value<X>();

    static constexpr uint32_t CCR_RESET_VALUE = 0x0;
    template<uint32_t X>
    static constexpr uint32_t CCR_TRIM =   // Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows to tune the internal reference buffer voltage.
        bit_field_t<0, 0x3f>::value<X>();
};


////
//
//      VREFBUF
//
////

struct stm32h750x_vrefbuf_t
{
    volatile uint32_t VREFBUF_CSR; // VREFBUF control and status register
    volatile uint32_t VREFBUF_CCR; // [read-write] VREFBUF calibration control register

    static constexpr uint32_t VREFBUF_CSR_RESET_VALUE = 0x2;
    static constexpr uint32_t VREFBUF_CSR_ENVR = 0x1; // Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode.
    static constexpr uint32_t VREFBUF_CSR_HIZ = 0x2;  // High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration.
    static constexpr uint32_t VREFBUF_CSR_VRR = 0x8;  // Voltage reference buffer ready
    template<uint32_t X>
    static constexpr uint32_t VREFBUF_CSR_VRS =       // Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved
        bit_field_t<4, 0x7>::value<X>();

    static constexpr uint32_t VREFBUF_CCR_RESET_VALUE = 0x0;
    template<uint32_t X>
    static constexpr uint32_t VREFBUF_CCR_TRIM =   // Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows to tune the internal reference buffer voltage.
        bit_field_t<0, 0x3f>::value<X>();
};


template<>
struct peripheral_t<STM32H742x, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H743, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H745_CM4, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H745_CM7, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H747_CM4, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H747_CM7, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H753, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H755_CM4, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H755_CM7, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H757_CM4, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H757_CM7, VREFBUF>
{
    typedef stm32h742x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H750x, VREFBUF>
{
    typedef stm32h750x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H7A3x, VREFBUF>
{
    typedef stm32h750x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H7B0x, VREFBUF>
{
    typedef stm32h750x_vrefbuf_t T;
    static T& V;
};

template<>
struct peripheral_t<STM32H7B3x, VREFBUF>
{
    typedef stm32h750x_vrefbuf_t T;
    static T& V;
};

using vrefbuf_t = peripheral_t<mcu_svd, VREFBUF>;

